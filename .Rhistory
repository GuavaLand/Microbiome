#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 700
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 800
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 900
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 1000
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 300
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 200
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 100
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 50
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 20
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
train_size = 5
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
par(mfrow = c(2,2))
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
100:100:1000
100:1000:100
seq(100,1000,100)
model <- function(train_size){ #make model training reusable with a single set of simulation (all_data)
#Decide how many sample to train model
train_size = train_size
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
re = list(difference_score,actual_sample,predicted_SS)
return(re)
}
sample_size= 100
returned = model(sample_size)
1:10
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (sample_size in 1:10) {
returned = model(sample_size*10)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[sample_size,1] = difference_score
differenceScoreVsSampleSize[sample_size,2] = sample_size*100
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
head(differenceScoreVsSampleSize)
difference_score
model <- function(train_size){ #make model training reusable with a single set of simulation (all_data)
#Decide how many sample to train model
train_size = train_size
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
re = list(difference_score,actual_sample,predicted_SS)
return(re)
}
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (sample_size in 1:10) {
returned = model(sample_size*10)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[sample_size,1] = difference_score
differenceScoreVsSampleSize[sample_size,2] = sample_size*100
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
model(100)
model <- function(train_size){ #make model training reusable with a single set of simulation (all_data)
#Decide how many sample to train model
train_size = train_size
train_data = all_data[1:train_size,]
rf = randomForest(CommunityDensity ~ ., data = train_data)
###########################################
#1. take test_sample_size samples from all data
#2. use rf to predict final state
#3. calculate prediction accuracy
#4. save as a csv to cwd
test_sample_size = 50
#1. take test sample
actual_sample  = all_data[(train_size+1):(train_size + test_sample_size),]
#2. use rf_species to predict final state
predicted_SS = matrix(nrow = nrow(actual_sample), ncol = 1)
colnames(predicted_SS) = c('Predicted_Community_Density')
for (row in 1:nrow(actual_sample)) {
data_point = as.data.frame(actual_sample[row,1:N])
predicted_SS[row,1] = predict(rf,data_point)
}
#3. calculate accuracy
difference_score = colSums((predicted_SS - actual_sample$CommunityDensity)^2)/nrow(actual_sample)
re = list(difference_score=difference_score,actual_sample=actual_sample,
predicted_SS=predicted_SS)
return(re)
}
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (sample_size in 1:10) {
returned = model(sample_size*10)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[sample_size,1] = difference_score
differenceScoreVsSampleSize[sample_size,2] = sample_size*100
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',train_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
differenceScoreVsSampleSize
plot(differenceScoreVsSampleSize$sample_size,differenceScoreVsSampleSize$difference_score)
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1])
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (sample_size in 1:10) {
returned = model(sample_size*10)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[sample_size,1] = difference_score
differenceScoreVsSampleSize[sample_size,2] = sample_size*100
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',sample_size*10,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',(sample_size*10),' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (counter in 1:10) {
sample_size = counter *100
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste('Trained w ',sample_size,' Samples: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
differenceScoreVsSampleSize
#Create matrix to store training sample size and the result difference score
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (counter in 1:9) {
sample_size = counter *100
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste(sample_size,' Samples Training: ',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
for (counter in 1:9) {
sample_size = counter *100
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste(sample_size,'Samples Training:',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
#Create matrix to store training sample size and the result difference score
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(2,2))
for (counter in 1:9) {
sample_size = counter *100
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste(sample_size,'Samples Training:',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(3,3))
for (counter in 1:9) {
sample_size = counter *100
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste(sample_size,'Samples Training:',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(3,3))
for (counter in 1:9) {
sample_size = counter *10
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste(sample_size,'Samples Training:',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
differenceScoreVsSampleSize
dat1 = differenceScoreVsSampleSize
differenceScoreVsSampleSize = matrix(nrow = 10,ncol = 2)
colnames(differenceScoreVsSampleSize) = c('difference_score','sample_size')
par(mfrow = c(3,3))
for (counter in 1:9) {
sample_size = counter *100
returned = model(sample_size)
difference_score = returned$difference_score
actual_sample = returned$actual_sample
predicted_SS = returned$predicted_SS
differenceScoreVsSampleSize[counter,1] = difference_score
differenceScoreVsSampleSize[counter,2] = sample_size
plot(actual_sample$CommunityDensity,predicted_SS, main = paste(sample_size,'Samples Training:',round(difference_score,4)),
xlab = 'Actual Community Density',ylab = 'Predicted Community Density')
}
plot(differenceScoreVsSampleSize[,2],differenceScoreVsSampleSize[,1], main = 'Difference between Predicted and Actual Community Density over Sample Size',
xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
dat2 = differenceScoreVsSampleSize
dat2
dat1
datad = rbind(dat1,dat2)
datad
plot(datad[,2],datad[,1])
par(mfrow = c(1,1))
plot(datad[,2],datad[,1])
plot(datad[,2],datad[,1],main = 'Difference between Predicted and Actual Community Density over Sample Size',xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
plot(datad[,2],datad[,1],main = 'Difference between Predicted and Actual Community Density \n over Sample Size',xlab = 'Training Sample Size', ylab = 'Difference between Predicted and Actual')
